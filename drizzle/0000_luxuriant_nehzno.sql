CREATE TABLE IF NOT EXISTS "replier_account" (
	"id" text PRIMARY KEY NOT NULL,
	"account_id" text NOT NULL,
	"provider_id" text NOT NULL,
	"user_id" text NOT NULL,
	"access_token" text,
	"refresh_token" text,
	"id_token" text,
	"access_token_expires_at" timestamp,
	"refresh_token_expires_at" timestamp,
	"scope" text,
	"password" text,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_session" (
	"id" text PRIMARY KEY NOT NULL,
	"expires_at" timestamp NOT NULL,
	"token" text NOT NULL,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL,
	"ip_address" text,
	"user_agent" text,
	"user_id" text NOT NULL,
	"impersonated_by" text,
	CONSTRAINT "replier_session_token_unique" UNIQUE("token")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_user" (
	"id" text PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"email" text NOT NULL,
	"email_verified" boolean NOT NULL,
	"image" text,
	"created_at" timestamp NOT NULL,
	"updated_at" timestamp NOT NULL,
	"role" text,
	"banned" boolean,
	"ban_reason" text,
	"ban_expires" timestamp,
	CONSTRAINT "replier_user_email_unique" UNIQUE("email")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_verification" (
	"id" text PRIMARY KEY NOT NULL,
	"identifier" text NOT NULL,
	"value" text NOT NULL,
	"expires_at" timestamp NOT NULL,
	"created_at" timestamp,
	"updated_at" timestamp
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_billing" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" text NOT NULL,
	"product_id" uuid NOT NULL,
	"status" text DEFAULT 'pending' NOT NULL,
	"provider" text NOT NULL,
	"provider_transaction_id" text,
	"provider_id" text NOT NULL,
	"customer_id" text NOT NULL,
	"amount" numeric NOT NULL,
	"currency" text NOT NULL,
	"interval" text,
	"current_period_start" timestamp,
	"current_period_end" timestamp,
	"cancel_at_period_end" boolean DEFAULT false,
	"canceled_at" timestamp,
	"ended_at" timestamp,
	"metadata" jsonb DEFAULT '{}'::jsonb,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_generation" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" text NOT NULL,
	"product_id" uuid NOT NULL,
	"source" text NOT NULL,
	"link" text,
	"post" text NOT NULL,
	"reply" text NOT NULL,
	"author" text,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_post" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "replier_post_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"name" varchar(256),
	"created_by" varchar(255) NOT NULL,
	"created_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"updated_at" timestamp with time zone
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_products" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"name" text NOT NULL,
	"description" text,
	"price" numeric NOT NULL,
	"type" text NOT NULL,
	"mode" text NOT NULL,
	"limit" integer,
	"has_trial" boolean DEFAULT false,
	"trial_duration" integer,
	"trial_usage_limit" integer,
	"marketing_taglines" jsonb[],
	"status" text DEFAULT 'active' NOT NULL,
	"price_id" text,
	"is_free" boolean DEFAULT false,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_settings" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"general" jsonb DEFAULT '{}'::jsonb,
	"account" jsonb DEFAULT '{"customPrompt":""}'::jsonb,
	"billing" jsonb DEFAULT '{}'::jsonb,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_usage" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" text NOT NULL,
	"product_id" uuid NOT NULL,
	"used" integer DEFAULT 0 NOT NULL,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_account" ADD CONSTRAINT "replier_account_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_session" ADD CONSTRAINT "replier_session_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_billing" ADD CONSTRAINT "replier_billing_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_billing" ADD CONSTRAINT "replier_billing_product_id_replier_products_id_fk" FOREIGN KEY ("product_id") REFERENCES "public"."replier_products"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_generation" ADD CONSTRAINT "replier_generation_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_generation" ADD CONSTRAINT "replier_generation_product_id_replier_products_id_fk" FOREIGN KEY ("product_id") REFERENCES "public"."replier_products"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_post" ADD CONSTRAINT "replier_post_created_by_replier_user_id_fk" FOREIGN KEY ("created_by") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_usage" ADD CONSTRAINT "replier_usage_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_usage" ADD CONSTRAINT "replier_usage_product_id_replier_products_id_fk" FOREIGN KEY ("product_id") REFERENCES "public"."replier_products"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "user_id_idx" ON "replier_billing" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "product_id_idx" ON "replier_billing" USING btree ("product_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "status_idx" ON "replier_billing" USING btree ("status");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "active_sub_idx" ON "replier_billing" USING btree ("user_id","product_id","status");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "generation_user_id_idx" ON "replier_generation" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "generation_product_id_idx" ON "replier_generation" USING btree ("product_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "generation_source_idx" ON "replier_generation" USING btree ("source");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "generation_user_product_idx" ON "replier_generation" USING btree ("user_id","product_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "created_by_idx" ON "replier_post" USING btree ("created_by");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "name_idx" ON "replier_post" USING btree ("name");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "usage_user_id_idx" ON "replier_usage" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "usage_product_id_idx" ON "replier_usage" USING btree ("product_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "usage_user_product_idx" ON "replier_usage" USING btree ("user_id","product_id");